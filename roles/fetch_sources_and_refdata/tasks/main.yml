#
# Note this role depends on rsync (tasks) for transferring potentially large amounts of data.
#
# In order to do this efficiently we need rsync >= 3.1.2 and therefore we have a dependency on
# the rsync_compatibility_check role to check rsync >= 3.1.2 is available on both the control host
# as well as on the managed hosts.
#
# We need/use the following rsync options:
# --omit-dir-times  Is required to prevent "sync error: some files/attrs were not transferred"
#                   for file systems like NFS mounts that cannot handle setting dir times properly.
# --omit-link-times Is required to prevent "sync error: some files/attrs were not transferred"
#                   for file systems like NFS mounts that cannot handle setting dir times properly.
#                   Requires rsync >= 3.1.2 (default on Enterprise Linux >= 7.x).
# --chmod           Is required to prevent errors when the perms on the source are not what is required/expected on the destination.
#                   Fixing perms on the source would be good, but that may be out of our control.
#                   In that case --chmod ensures we get what we want on the destination.
# --force           Is required when symlinks have changed into dirs/files or vice versa.
#                   In that case the wrong outdated stuff has to be deleted on the destination first before the new stuff can be created.
#                   Deleting the outdated stuff may fail without --force.
# --relative        In combination with a "source_server:some/path/not/created/on/destination/./path/created/on/destination/some_file" (dot dir)
#                   recreates a partial dir structure on the destination relative to the /./ dir, when it does not already exist.
#                   Without this combination of --relative and dot dir rsync will error when the path does not exist on the destination.
#
---
- name: Create folder for reference data.
  ansible.builtin.file:
    dest: "{{ item }}"
    state: 'directory'
    mode: "{{ MODE_2775_HARD }}"
  with_items:
    - "{{ hpc_env_prefix }}/data"

- name: Create a .ssh/tmp directory
  ansible.builtin.file:
    path: "~/.ssh/tmp"
    state: directory
    mode: '0600'

- name: "Defining webslag ssh settings"
  ansible.builtin.blockinfile:
    path: "~/.ssh/config"
    mode: '0640'
    create: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK WEBSLAG"
    block: |
      Host ssh.webhosting.rug.nl
        User f114592
        ServerAliveInterval 60
        ServerAliveCountMax 5
        ControlMaster auto
        ControlPath ~/.ssh/tmp/%C
        ControlPersist 4m

- name: Synchronize reference data.
  ansible.posix.synchronize:
    src: "{{ remote_env_cache_dir_public }}/data/./{{ item }}"
    dest: "{{ hpc_env_prefix }}/data/"
    mode: 'pull'
    # Temporarily disabled as it is broken in Mitogen 0.3.3. Fix is already merged and will be in next Mitogen version.
    # use_ssh_args: true
    ssh_connection_multiplexing: true
    rsync_opts:
      - '--omit-dir-times'
      - '--omit-link-times'
      - "--chmod={{ MODE_D2775_F0664 }}"
      - '--force'
      - '--relative'
  delegate_to: "{{ inventory_hostname }}"
  with_items: "{{ refdata }}"

- name: Synchronize publicly available sources, which cannot be downloaded automagically by EB for technical reasons.
  # This is usually the case for downloads from FTP URLs,
  # which may be blocked by firewalls due to the insecure nature of FTP.
  ansible.posix.synchronize:
    src: "{{ remote_env_cache_dir_public }}/sources/./{{ item }}"
    dest: "{{ easybuild_sources_dir }}/"
    mode: 'pull'
    # Temporarily disabled as it is broken in Mitogen 0.3.3. Fix is already merged and will be in next Mitogen version.
    # use_ssh_args: true
    ssh_connection_multiplexing: true
    rsync_opts:
      - '--relative'
      - '--omit-dir-times'
      - '--omit-link-times'
      - "--chmod={{ MODE_D2775_F0664 }}"
      - '--force'
  delegate_to: "{{ inventory_hostname }}"
  with_items: "{{ public_sources }}"

- name: Synchronize sources, which cannot be downloaded automagically by EasyBuild for legal reasons.
  # This is more or less the same as the download above,
  # but for legal reasons we cannot cache these on a publicly accessible server.
  # You will have to download these yourself to a system under your control,
  # so the playbook can copy them to your target systems.
  ansible.posix.synchronize:
    src: "{{ remote_env_cache_dir_private }}/sources/./{{ item }}"
    dest: "{{ easybuild_sources_dir }}/"
    mode: 'pull'
    # Temporarily disabled as it is broken in Mitogen 0.3.3. Fix is already merged and will be in next Mitogen version.
    # use_ssh_args: true
    ssh_connection_multiplexing: true
    rsync_opts:
      - '--relative'
      - '--omit-dir-times'
      - '--omit-link-times'
      - "--chmod={{ MODE_D2775_F0664 }}"
      - '--force'
  delegate_to: "{{ inventory_hostname }}"
  with_items: "{{ private_sources }}"
...
