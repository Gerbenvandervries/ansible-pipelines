require("strict")
require("cmdfuncs")
require("utils")
require("lmod_system_execute")

local hook  = require("Hook")
local FrameStk  = require("FrameStk")


local function logmsg(logTbl)
    -- Print to syslog with generic header
    -- All the elements in the table logTbl are
    -- added in order. Expect format:
    -- logTbl[#logTbl+1] = {'log_key', 'log_value'}

    local user  = os.getenv("USER")
    local msg   = string.format("stack={{ stack_prefix }}, user=%s", user)

    for _, val in ipairs(logTbl) do
        msg = msg .. string.format(", %s=%q", val[1], val[2] or "")
    end

    lmod_system_execute("logger -t lmod -p user.notice -- " .. msg)
end

local function load_hook(t)
    -- Called every time a module is loaded
    -- the arg t is a table:
    --     t.modFullName:  the module full name: (i.e: gcc/4.7.2)
    --     t.fn:           the file name: (i.e /apps/modulefiles/Core/gcc/4.7.2.lua)

    if (mode() ~= "load") then return end

    -- If userload is "yes", then the user request to load this module.
    -- Else it is getting loaded as a dependency.
    local frameStk = FrameStk:singleton()
    if (frameStk:atTop()) then
        local logTbl = {}
        logTbl[#logTbl+1] = {"module", t.modFullName}
        logmsg(logTbl)
    end

end

hook.register("load", load_hook)
